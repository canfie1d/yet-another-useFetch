import{useEffect,useReducer}from"react";function fetchReducer(e,r){switch(r.type){case"SET_URL":return{...e,fetchUrl:`${r.payload}`,loading:!0};case"SET_BODY":return{...e,fetchBody:r.payload};case"SET_RESPONSE":return{...e,response:r.payload,rerun:!1,loading:!1};case"SET_ERROR":return{...e,error:r.payload,rerun:!1,loading:!1};case"SET_RERUN":return{...e,rerun:r.payload};default:throw new Error}}export const useFetch=(e=null,r="GET",t=null,a=null,o=!0,n=null)=>{const s={loading:!!e,fetchUrl:e,fetchBody:t,response:null,error:null,rerun:!1},[c,l]=useReducer(fetchReducer,s);return useEffect(()=>{const e=new AbortController;if(!c.fetchUrl)return;let t=!1;return(async()=>{try{let e={method:r,credentials:"same-origin"};c.fetchBody&&(e.body=JSON.stringify(c.fetchBody)),o&&(e.headers={Accept:"application/json","Content-Type":"application/json"},n&&Object.assign(e.headers,{Authorization:`Bearer ${n}`}),a&&(e.headers=Object.assign(e.headers,a)));const s=await fetch(c.fetchUrl,e);if(!1===s.ok)l({type:"SET_ERROR",payload:{status:s.status,message:s.statusText}});else{if(t)return;const e=await s.json();l({type:"SET_RESPONSE",payload:e})}}catch(e){if(t)return;"AbortError"===e.name?l({type:"SET_ERROR",payload:"Request was canceled via controller.abort"}):l({type:"SET_ERROR",payload:e})}})(),()=>{e.abort(),t=!0}},[c.fetchUrl,c.rerun]),{noop:!c.fetchUrl&&!c.response,loading:c.loading,response:c.response,error:c.error,setFetchUrl:e=>{l({type:"SET_URL",payload:e})},setFetchBody:e=>{l({type:"SET_BODY",payload:e})},rerunFetch:e=>{l({type:"SET_RERUN",payload:e})}}};
